package com.kh.statement.model.service;

import java.sql.Connection;

import com.kh.common.JDBCTemplate;
import com.kh.statement.model.dao.MemberDao;
import com.kh.statement.model.vo.Member;

// 클라이언트의 요청처리
// 제어흐름 --> 컨트롤러
// 핵심 로직 실행 --> 서비스


/*
 * 비지니스 로직 실행(의사결정코드) -> 데이터 가공, 중복 체크, 연산 처리, 암호화
 * 트랜잭션 관리
 * 여러 DAO를 조합
 * 예외 처리 및 변환
 * 보안 및 권한 검사
 * 
 */
public class MemberService {
	/*
	 * Serviece : 비지니스로직 / 의사결정코드를 작성하는 부분
	 * 			  Controller -> service의 메소드를 호출
	 * 			  Service에서 Connection을 생성하여 DAO로 전달
	 * 			  만약 SQL문을 수행해야하는데 필요한 값이 있다면 Controller로부터 전달받아서
	 * 			  Connection과 같이 넘겨줄 것
	 * 			  DAO에서 DB작업이 끝나면 Serviece단에서 결과에 따른 트랜잭션 처리도 진행
	 * 
	 * 			  => Service를 추가함으로 DAO는 순수하게 SQL문을 처리하는 부분만 남겨둘 것
	 * 
	 * 
	 * 
	 */
	
	public int save(Member member) {
		
		// Connection 객체 생성
		Connection conn = JDBCTemplate.getConnection();
		
		// DAO 호출 시 Connection객체 전달
		// +
		// Controller가 넘겨준 사용자가 입력한 값이 필드에 담겨있는
		// Member 참조변수를 함께 넘겨줌
		int result = new MemberDao().save(conn, member);
		
		// 6) 트랜잭션 처리
		
		if(result > 0) {
			JDBCTemplate.commit(conn);
		} 
		
		// 7_2) 자원반납
		JDBCTemplate.close(conn);
		
		return result;
	}
	
	
	
	
}
